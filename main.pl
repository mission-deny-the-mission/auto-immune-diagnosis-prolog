% retract any information that may be left over from running a previous
% version of the program
% this is very helpful for debugging in something like VS Code which
% tries to retain the same prolog terminal and all it's state
% when re running the program

:- retractall(symptom(X, Y)).
:- retractall(explanation(X, Y)).
:- retractall(disease(X)).

:- retractall(ask_symptoms2).
:- retractall(match_disease(X)).
:- retractall(match_disease(X, Y)).
:- retractall(print_array(X)).
:- retractall(main).

% These predicates are definined in multiple different disease files in the
% knowledge base
:- multifile symptom/2.
:- multifile explanation/2.
:- multifile disease/1.

% consult the files in the knowledge base
:- consult('diseases/CGD.pl').
:- consult('diseases/Common variable immunodeficiency.pl').
:- consult('diseases/goodpasture syndrome.pl').
:- consult('diseases/Grave\'s disease.pl').
:- consult('diseases/HIV.pl').
:- consult('diseases/lupus.pl').
:- consult('diseases/SCID.pl').
:- consult('diseases/Scleroderma.pl').
:- consult('diseases/Type 1 Diabetes.pl').
:- consult('diseases/vasculitis.pl').

% this needs to declared as dynamic because it is being generated by the
% ask_symptoms2 predicate
:- dynamic patients_symptoms/1.

% predicate to get a list of symptoms by the user and store them in memory
% using assert/1 as the patients_symptoms/1 predicate.
% It knows when the user has finished entering symptoms when they type:
% stop.
ask_symptoms :-
    write_ln('Patient\'s symptom'),
    read(Symptom),
    (symptom(_, Symptom) ->
        assert(patients_symptoms(Symptom)),
        ask_symptoms;
        (Symptom = 'stop' ->
            true
            ;
            write_ln('That is not a valid symptom. Please try again.'),
            ask_symptoms
        )
    ).

% predicate to match diseases to the symptoms
match_disease(Disease) :-
    bagof(Patient_symptom, patients_symptoms(Patient_symptom), Patient_symptoms),
    match_disease(Disease, Patient_symptoms).

match_disease(Disease, []).
match_disease(Disease, [Head | Tail]) :-
    Head \= [],
    symptom(Disease, Head),
    match_disease(Disease, Tail).

% print of an array's contents on seperate lines to the console
print_array([]).
print_array([Head | Tail]) :-
    Head \= [],
    write_ln(Head),
    print_array(Tail).

% main predicate of the program
main :-
    retractall(patients_symptoms(X)),
    ask_symptoms,
    (bagof(Disease, match_disease(Disease), Diseases) ->
        write_ln('Diseases matching all symptoms:'),
		print_array(Diseases);
		write_ln('Could not find a disease that matches all of the symptoms.')
	).

% call the main predicate then halt
:- main.
:- halt.
